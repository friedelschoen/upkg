{ package recipe }

Recipe <- require:Require? _ lines:Line* _ EOF {
	result := &Recipe{c.pos, nil, nil}
    if require != nil {
        result.requiredAttributes = collectPairs(require.([]pair))
    } else {
        result.requiredAttributes = map[string]Evaluable{}
    }

	result.attributes = collectPairs(toAnySlice[pair](lines.([]any)))

	return result, nil
}

Line <- _ val:Pair? _ ";" _ { 
	return val, nil
} 

Require <- _ "[" _ head:RequireContent tail:(_ "," _ val:RequireContent { return val, nil })* _ "]" _ ";" {
    return headTail[pair](head, tail.([]any)), nil
}

RequireContent <- key:Key _ "=" _ value:Value { 
    return pair{key.(string), value.(Evaluable)}, nil 
} / key:Key {
    return pair{key.(string), nil}, nil
}

Key <- val:[a-zA-Z0-9_]+ { 
    return asString(val), nil
}

Pair <- key:Key _ "=" _ value:Value {
    return pair{key.(string), value.(Evaluable)}, nil
}

Path <- val:[^ [\]]+ {
    return &recipeStringLiteral{c.pos, asString(val)}, nil 
}

Import <- "import" _ path:(Path / String) _ "{" _ params:ImportParams? _ "}" { 
	pairs := map[string]Evaluable{}
	if params != nil {
		pairs = collectPairs(toAnySlice[pair](params.([]any)))
	}
	return &recipeImport{c.pos, path.(Evaluable), pairs}, nil
}

ImportParams <- _ head:Pair tail:(_ "," _ val:Pair { return val, nil })* {
    return headTail[any](head, tail.([]any)), nil
}

Reference <- key:Key {
	return &recipeReference{c.pos, key.(string)}, nil
}

Surrounded <- "(" _ value:Value _ ")" {
	return value, nil
}

Dependencies <- "with" _ dependencies:Value _ target:Value {
	return &recipeWith{c.pos, dependencies.(Evaluable), target.(Evaluable)}, nil
}

Output <- "output" _ script:Value {
    return &recipeOutput{c.pos, script.(Evaluable)}, nil
}

Value <- value:(List / String / Multiline / Import / Output / Dependencies / Surrounded / Reference) attr:(_ "->" _ val:Key { return positioned[string]{c.pos, val.(string)}, nil })? {
	if attr == nil {
		return value, nil
	}
	return &recipeGetter{attr.(positioned[string]).pos, value.(Evaluable), attr.(positioned[string]).content}, nil
}

List <- "[" _ head:Value values:(_ "," _ val:Value { return val, nil })* _ "]" { 
	return &recipeList{c.pos, headTail[Evaluable](head, values.([]any))}, nil
}

String <- '"' content:StringContent+ '"' { 
    return makeString(c.pos, content), nil
}

Multiline <- "\"\"" content:MultilineContent* "\"\"" {
    return makeString(c.pos, content), nil
}

StringContent <- StringInterpolation / !"${" chr:[^"\n\r] {   // syntax highlighting is fukkie wukkie -> "
    return positioned[[]byte]{c.pos, chr.([]byte)}, nil
}

MultilineContent <- StringInterpolation / (!"\"\"" !"${" chr:. {
    return positioned[[]byte]{c.pos, chr.([]byte)}, nil
})

StringInterpolation <- "${" _ val:Value _ "}" {
    return val, nil
}

WS <- [ \t\n\r]

_ "whitespace" <- (Comment / WS)*
Comment "comment" <- "#" [^\n\r]+

EOF <- !.
