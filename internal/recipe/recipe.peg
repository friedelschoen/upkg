{ package recipe }

Recipe <- require:Require? _ lines:Lines _ EOF {
	result := &Recipe{}
    if require != nil{
        result.requiredAttributes = collectPairs(require.([]pair))
    } else {
        result.requiredAttributes = map[string]Evaluable{}
    }

	result.attributes = collectPairs(lines.([]pair))

	return result, nil
}

Lines <- head:(val:Pair? _ NL { return val, nil })* tail:Pair? {
	slc := toAnySlice[pair](head.([]any))
    if tail == nil {
		return slc, nil
	}

	return append(slc, tail.(pair)), nil
}

Require <- _ "[" _ head:RequireContent tail:(_ "," _ val:RequireContent { return val, nil })* _ "]" _ NL {
    return headTail[pair](head, tail.([]any)), nil
}

RequireContent <- key:Key _ "=" _ value:Value { 
    return pair{key.(string), value.(Evaluable)}, nil 
} / key:Key {
    return pair{key.(string), nil}, nil
}

Key <- val:[a-zA-Z0-9_]+ { 
    return asString(val), nil
}

Pair <- key:Key _ "=" _ value:Value {
    return pair{key.(string), value.(Evaluable)}, nil
}

Path <- val:[^ [\]]+ {
    return &recipeStringLiteral{asString(val)}, nil 
}

AttributeGetter <- "->" val:Key {
    return val, nil
}

Import <- "[" _ path:(Path / String) params:ImportParams? _ "]" attr:AttributeGetter? { 
	pairs := map[string]Evaluable{}
	if params != nil {
		pairs = collectPairs(toAnySlice[pair](params.([]any)))
	}
	call := &recipeImport{path.(Evaluable), pairs}
	if attr == nil {
		return call, nil
	}
	return &recipeGetter{call, attr.(string)}, nil
}

ImportParams <- _ head:Pair tail:(_ "," _ val:Pair { return val, nil })* {
    return headTail[any](head, tail.([]any)), nil
}

Value <- List / String / Multiline / Import

List <- "{" values:((WS / NL)* val:Value { return val, nil })* (WS / NL)* "}" { 
	return &recipeList{toAnySlice[Evaluable](values.([]any))}, nil
}

String <- '"' content:StringContent+ '"' { 
    return makeString(content), nil
}
Multiline <- "\"\"" content:MultilineContent* "\"\"" {
    return makeString(content), nil
}

StringContent <- StringInterpolation / !"${" chr:[^"\n\r] { // syntax highlighting is fukkie wukkie -> "
    return chr, nil
}

MultilineContent <- StringInterpolation / (!"\"\"" !"${" chr:. {
    return chr, nil
})

StringInterpolation <- "${" _ val:StringValue _ "}" {
    return val, nil
}

StringValue <- key:Key attr:AttributeGetter? {
	if attr == nil {
		return &recipeReference{key.(string)}, nil
	}
	return &recipeGetter{&recipeReference{key.(string)}, attr.(string)}, nil
}

NL <- "\n" / "\r\n"
WS <- [ \t]

_ "whitespace" <- (Comment / WS)*
Comment "comment" <- "#" [^\n\r]+ &(NL / EOF)

EOF <- !.
