{ package recipe }

Recipe <- require:Require? _ lines:Lines _ EOF {
	result := &Recipe{}
    if require != nil{
        result.RequireAttributes = collectPairs(require.([]pair))
    } else {
        result.RequireAttributes = map[string]Buildable{}
    }

	// attrs := make([]pair, 0, len(lines.([]pair)))
	// for _, t := range lines.([]any) {
	//	if t != nil {
	//		attrs = append(attrs, t.(pair))
	// 	}
	// }
	result.Attributes = collectPairs(lines.([]pair))

	return result, nil
}

Lines <- head:(val:Pair? _ NL { return val, nil })* tail:Pair? {
	slc := toAnySlice[pair](head.([]any))
    if tail == nil {
		return slc, nil
	}

	return append(slc, tail.(pair)), nil
}

Require <- _ "[" _ head:RequireContent tail:(_ "," _ val:RequireContent { return val, nil })* _ "]" _ NL {
    return headTail[pair](head, tail.([]any)), nil
}

RequireContent <- ky:Key _ "=" _ value:Value { return pair{ky.(string), value.(Buildable)}, nil }
                / ky:Key { return pair{ky.(string), nil}, nil }

Key <- val:[a-zA-Z0-9_]+ { return asString(val), nil }

Pair <- ky:Key _ "=" _ value:Value { return pair{ky.(string), value.(Buildable)}, nil }

Path <- val:[^ [\]]+ {	return &RecipeStringLiteral{asString(val)}, nil }

AttributeGetter <- "->" val:Key { return val, nil }

FunctionCall <- "[" _ path:(Path / String) params:FunctionParams? _ "]" attr:AttributeGetter? { 
	call := &RecipeFunction{path.(Buildable), collectPairs(toAnySlice[pair](params.([]any)))}
	if attr == nil {
		return call, nil
	}
	return &RecipeGetter{call, attr.(string)}, nil
}

FunctionParams <- _ head:Pair tail:(_ "," _ val:Pair { return val, nil })* {
    return headTail[any](head, tail.([]any)), nil
}

Value <- val:( String / Multiline / FunctionCall ) _ { return val, nil }

String <- '"' content:StringContent+ '"' { return makeString(content), nil }
Multiline <- "\"\"" content:MultilineContent* "\"\"" { return makeString(content), nil }

StringContent <- StringInterpolation / !"${" chr:[^"\n\r] { return chr, nil }
MultilineContent <- StringInterpolation / (!"\"\"" !"${" chr:. { return chr, nil })

StringInterpolation <- "${" _ val:StringValue _ "}" { return val, nil }

StringValue <- ky:Key attr:AttributeGetter? {
	if attr == nil {
		return &RecipeReference{ky.(string)}, nil
	}
	return &RecipeGetter{&RecipeReference{ky.(string)}, attr.(string)}, nil
}

NL <- "\n" / "\r\n"
WS <- [ \t]

_ "whitespace" <- (Comment / WS)*
Comment "comment" <- "#" [^\n\r]+ &(NL / EOF)

EOF <- !.
